package client

// this file is autogenerated for {{ .RecordType }} record type

import (
	"github.com/alexey-mavrin/graduate-2/internal/common"
	"github.com/alexey-mavrin/graduate-2/internal/store"
)

// List{{ .RecordType }}s lists account for the current user
func (c *Client) List{{ .RecordType }}s() (common.{{ .RecordType }}s, error) {
	records, err := c.listRecords(common.{{ .RecordType }}Record)
	if err != nil {
		return common.{{ .RecordType }}s{}, err
	}
	return *records.{{ .RecordType }}s, nil
}

// Delete{{ .RecordType }} returns account record with the given id
func (c *Client) Delete{{ .RecordType }}(id int64) error {
	err := c.deleteRecord(id, common.{{ .RecordType }}Record)
	if err != nil {
		return err
	}
	err = c.cacheDelete{{ .RecordType }}(id)
	if err != nil && err != store.ErrNotFound {
		return err
	}
	return nil
}

// Get{{ .RecordType }} returns account record with the given id
func (c *Client) Get{{ .RecordType }}(id int64) (common.{{ .RecordType }}, error) {
	record, err := c.getRecord(id, common.{{ .RecordType }}Record)
	if err != nil {
		return common.{{ .RecordType }}{}, err
	}
	return *record.{{ .RecordType }}, nil
}

// Update{{ .RecordType }} updates account record with the given id
func (c *Client) Update{{ .RecordType }}(id int64, acc common.{{ .RecordType }}) error {
	record := common.Record{
		Type: common.{{ .RecordType }}Record,
		{{ .RecordType }}: &acc,
	}
	return c.updateRecord(id, record)
}

// Store{{ .RecordType }} stores account record
func (c *Client) Store{{ .RecordType }}(acc common.{{ .RecordType }}) (int64, error) {
	record := common.Record{
		Type: common.{{ .RecordType }}Record,
		{{ .RecordType }}: &acc,
	}
	return c.storeRecord(record)
}
